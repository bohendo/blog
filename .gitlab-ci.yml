stages:
 - build
 - test
 - deploy

build:
  image: docker:stable
  stage: build
  only:
    refs:
      - branches
  services:
    - name: docker:dind
      alias: localhost
  script:
    - apk add bash curl git jq make
    - make pull-latest
    - make all
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - make push

test:
  image: docker:stable
  stage: test
  only:
    refs:
      - branches
  services:
    - name: docker:dind
      alias: localhost
  variables:
    BLOG_DOMAINNAME: "localhost"
    BLOG_PROD: "true"
  script:
    - apk add bash curl git jq make
    - make pull-commit
    - BLOG_DOMAINNAME="" BLOG_PROD="true" make restart
    - sleep 5
    - make dls
    - docker service logs --raw --tail 100 blog_server
    - docker service logs --raw --tail 100 blog_webserver
    - docker service logs --raw --tail 100 blog_proxy
    - make test

deploy:
  image: docker:stable
  stage: deploy
  services:
    - name: docker:dind
      alias: localhost
  only:
    refs:
      - prod
  script:
    - apk add bash curl git jq make
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - make push-semver
    - >
      docker build --tag ssh-action ops/ssh-action;
      docker run \
        --env=GIT_PROJECT_NAME=$CI_PROJECT_NAME \
        --env=GIT_REPOSITORY_URL=$CI_REPOSITORY_URL \
        --env=GIT_BRANCH=prod \
        --env=GIT_REMOTE=origin \
        ssh-action $SERVER_URL $SSH_KEY '
          export BLOG_PROD="true";
          make pull-commit;
          make pull-semver;
          make restart;
          docker container prune -f;
          docker image ls -q | xargs docker image rm 2> /dev/null || true;
        '
